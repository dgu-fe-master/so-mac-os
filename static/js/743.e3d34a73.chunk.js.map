{"version":3,"file":"static/js/743.e3d34a73.chunk.js","mappings":"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","sources":["components/Apps/Calculator/Calculator.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MouseEvent, useEffect, useState } from 'react';\nimport { TbPlusMinus } from 'react-icons/tb';\n\ntype BinaryOperation = '÷' | '+' | '-' | '×';\ntype UnaryOperation = '%' | '+/-';\nconst MAX_NUMBER_LENGTH = 15;\nconst DEFAULT_FONT_SIZE = '3rem';\nconst INIFINITY = 1e12;\n\nconst Calculator = () => {\n    const [prevNumber, setPrevNumber] = useState<string>('');\n    const [nextNumber, setNextNumber] = useState<string>('');\n    const [operation, setOperation] = useState<undefined | BinaryOperation>(undefined);\n    const [result, setResult] = useState<string>('0');\n    const [fontSize, setFontSize] = useState<string>(DEFAULT_FONT_SIZE);\n\n    useEffect(() => {\n        const result = operation && nextNumber ? String(nextNumber) : String(prevNumber);\n        if (result === '') {\n            return initResult();\n        }\n        adjustResultFontSize(result);\n        setResult(result);\n    }, [prevNumber, nextNumber, operation]);\n\n    const initResult = () => {\n        setResult('0');\n        setFontSize(DEFAULT_FONT_SIZE);\n    };\n\n    const adjustResultFontSize = (result: string) => {\n        if (result.length > 8) {\n            const size = 0.1 * result.length;\n            setFontSize(`${3 - size}rem`);\n        } else {\n            setFontSize(DEFAULT_FONT_SIZE);\n        }\n    };\n\n    const handleBinaryperationClick = (operation: BinaryOperation) => {\n        setOperation(operation);\n    };\n\n    const handleUnaryOperationClick = (operation: UnaryOperation) => {\n        if (operation === '+/-') {\n            setPrevNumber((num) => String(-num));\n        }\n        if (operation === '%') {\n            setPrevNumber((num) => String(parseFloat(num) / 100));\n        }\n    };\n\n    const handleNumberClick = (e: MouseEvent) => {\n        const target = e.target as HTMLButtonElement;\n        if (operation) {\n            if (nextNumber.length > MAX_NUMBER_LENGTH) return;\n            if (nextNumber === '0' && target.value === '0') return;\n            if (nextNumber === '0' && target.value !== '0') setNextNumber(target.value);\n            else setNextNumber((num) => num + target.value);\n        } else {\n            if (prevNumber.length > MAX_NUMBER_LENGTH) return;\n            if (prevNumber === '0' && target.value === '0') return;\n            if (prevNumber === '0' && target.value !== '0') setPrevNumber(target.value);\n            else setPrevNumber((num) => num + target.value);\n        }\n    };\n\n    const handleReset = () => {\n        setPrevNumber('');\n        setNextNumber('');\n        setOperation(undefined);\n    };\n\n    const handleEqualClick = () => {\n        let result = '';\n        switch (operation) {\n            case '÷':\n                result = new Function('return ' + prevNumber + '/' + nextNumber)();\n                break;\n            case '+':\n                result = new Function('return ' + prevNumber + '+' + nextNumber)();\n                break;\n            case '-':\n                result = new Function('return ' + prevNumber + '-' + nextNumber)();\n                break;\n            case '×':\n                result = new Function('return ' + prevNumber + '*' + nextNumber)();\n                break;\n        }\n        // NOTE: 1.0 + 2.0 != 0.3 이 아니기 때문에 소수점 오류 해결하기 위한 코드 !\n        setPrevNumber(String(Math.round(parseFloat(result) * INIFINITY) / INIFINITY));\n        setNextNumber('');\n    };\n\n    const handleDecimalPointClick = () => {\n        if (operation) {\n            if (nextNumber.includes('.')) return;\n            if (nextNumber === '') setNextNumber('0.');\n            else setNextNumber((num) => num + '.');\n        } else {\n            if (prevNumber.includes('.')) return;\n            if (prevNumber === '') setPrevNumber('0.');\n            else setPrevNumber((num) => num + '.');\n        }\n    };\n\n    return (\n        <CalculatorContainer>\n            <ResultContainer>\n                <Result fontSize={fontSize}>{result}</Result>\n            </ResultContainer>\n            <ButtonContainer>\n                <button onClick={handleReset}>{'AC'}</button>\n                <button onClick={() => handleUnaryOperationClick('+/-')}>\n                    <TbPlusMinus />\n                </button>\n                <button onClick={() => handleUnaryOperationClick('%')}>{'%'}</button>\n                <button onClick={() => handleBinaryperationClick('÷')}>{'÷'}</button>\n                <button value={7} onClick={handleNumberClick}>\n                    {'7'}\n                </button>\n                <button value={8} onClick={handleNumberClick}>\n                    {'8'}\n                </button>\n                <button value={9} onClick={handleNumberClick}>\n                    {'9'}\n                </button>\n                <button onClick={() => handleBinaryperationClick('×')}>{'×'}</button>\n                <button value={4} onClick={handleNumberClick}>\n                    {'4'}\n                </button>\n                <button value={5} onClick={handleNumberClick}>\n                    {'5'}\n                </button>\n                <button value={6} onClick={handleNumberClick}>\n                    {'6'}\n                </button>\n                <button onClick={() => handleBinaryperationClick('-')}>{'-'}</button>\n                <button value={1} onClick={handleNumberClick}>\n                    {'1'}\n                </button>\n                <button value={2} onClick={handleNumberClick}>\n                    {'2'}\n                </button>\n                <button value={3} onClick={handleNumberClick}>\n                    {'3'}\n                </button>\n                <button onClick={() => handleBinaryperationClick('+')}>{'+'}</button>\n                <button value={0} onClick={handleNumberClick}>\n                    {'0'}\n                </button>\n                <button onClick={handleDecimalPointClick}>{'.'}</button>\n                <button onClick={handleEqualClick}>{'='}</button>\n            </ButtonContainer>\n        </CalculatorContainer>\n    );\n};\n\nconst CalculatorContainer = styled.div``;\n\nconst ResultContainer = styled.div`\n    height: 60px;\n    padding: 0 1em;\n    display: flex;\n    justify-content: end;\n    align-items: end;\n`;\n\ntype ResultProps = {\n    fontSize: string;\n};\n\nconst Result = styled.p<ResultProps>`\n    font-size: ${({ fontSize }) => fontSize};\n    font-weight: 200;\n    color: white;\n    padding-bottom: 10px;\n`;\n\nconst ButtonContainer = styled.div`\n    height: 234px;\n    border-radius: 0 0 0.5rem 0.5rem;\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    > button {\n        background-color: rgba(240, 240, 240, 0.3);\n        border: 0.5px solid rgba(50, 50, 50, 0.8);\n        color: white;\n        font-size: 1.3rem;\n        :active {\n            background-color: rgba(250, 250, 250, 0.5);\n        }\n        &:nth-child(17) {\n            grid-column: 1 / span 2;\n            border-radius: 0em 0 0 0.3em;\n        }\n        &:nth-child(n + 0):nth-child(-n + 3) {\n            background-color: rgba(160, 160, 160, 0.2);\n            :active {\n                background-color: rgba(240, 240, 240, 0.3);\n            }\n        }\n        &:nth-child(4n) {\n            background-color: #ff9f08;\n            font-size: 1.6rem;\n            :active {\n                opacity: 0.7;\n            }\n        }\n        &:nth-child(19) {\n            background-color: #ff9f08;\n            border-radius: 0 0 0.3em 0;\n            font-size: 1.6rem;\n            :active {\n                opacity: 0.7;\n            }\n        }\n    }\n`;\n\nexport default Calculator;\n"],"names":["DEFAULT_FONT_SIZE","INIFINITY","CalculatorContainer","styled","_templateObject","_taggedTemplateLiteral","ResultContainer","_templateObject2","Result","_templateObject3","_ref","fontSize","ButtonContainer","_templateObject4","_useState","useState","_useState2","_slicedToArray","prevNumber","setPrevNumber","_useState3","_useState4","nextNumber","setNextNumber","_useState5","undefined","_useState6","operation","setOperation","_useState7","_useState8","result","setResult","_useState9","_useState10","setFontSize","useEffect","String","initResult","adjustResultFontSize","length","size","concat","handleBinaryperationClick","handleUnaryOperationClick","num","parseFloat","handleNumberClick","e","target","value","_jsxs","children","_jsx","onClick","TbPlusMinus","includes","Function","Math","round"],"sourceRoot":""}